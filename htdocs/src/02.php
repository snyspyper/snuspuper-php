<head>
    <title>Учи-мучи гачимучи</title>
</head>

<body leftmargin="50" rightmargin="50" topmargin="50" bottommargin="50">
<font face="serif" size="+1">
<button> <a href="01.php">Previous Lvl</a> </button>
<button> <a href="03.php">Next Lvl</a> </button>

<h2>Переменные</h2>

<h3>Основы</h3>
<p>
    Переменные обозначаются знаком доллара и начинаются с латинским символом или знаком нижего подчёркивания. Потом можно использовать цифры.<br>
    Переменная <font color="orange"> $this </font> особенная, ей ничего нельзя присваивать.<br>
</p>
<p>
    Также возможно присвоение по ссылке. Причём, можно ссылаться на <i>именованную</i> переменную.
    <pre><?php
        $f = "randomname";
        $b = &$f;
        var_dump($b);
        $b = "Моё имя {$b}";
        echo "\r{$b}" . PHP_EOL . "{$f}";
    ?></pre>
</p>

<hr>

<h3>Предопределённые переменные</h3>
<p>
    PHP предоставляет большое количество предопределённых переменных. Они содержат всё, от внешних данных, до переменных оболочки, от текста сообщений об ошибках до последних полученных заголовков:

    <ul type="disk">
        <li> <b>Суперглобальные переменные</b> - встроенные переменные, которые всегда доступны во всех областях видимости.
            <ul>
                <li><b>$GLOBALS</b> - ссылки на все переменные глобальной области видимости</li>
                <li><b>$_SERVER</b> - информация о сервере и среде выполнения</li>
                <li>
                    <b>$_GET</b> - переменные, переданные скрипту через параметры URL.<br>
                    <?php if ($_GET["name"]):?>
                        <b><?='Здравствуйте, ';?> <font color="magenta"> <?= htmlspecialchars($_GET["name"]);?> </font>!</b>
                    <?php else:?>
                        <font color="red"> В конце адресной строки введите <b>?name=<i>Ваше имя</i></b>.</font>
                    <?php endif;?>
                </li>
                <li>
                    <b>$_POST</b> - массив данных, переданных скрипту через HTTP при использовании application/x-www-from-url-encoded<br>
                    или multipart/from-data в заголовке Content-Type
                </li>
                <li><b>$_FILES</b> - переменные файлов, загруженных по HTTP</li>
                <li><b>$_REQUEST</b> - переменные HTTP запросов</li>
                <li><b>$_SESSION</b> - переменные сессии</li>
                <li><b>$_ENV</b> - переменные окружения</li>
                <li><b>$_COOKIE</b> - HTTP COOKIE</li>
            </ul>
        </li>
        <li><b>$php_errormsg</b> - предыдущее сообщение об ошибке</li>
        <li><b>$http_response_header</b> - заголовки ответов HTTP</li>
        <li><b>$argc</b> - количество аргументов, переданных скрипту</li>
        <li><b>$argv</b> - массив переданных скрипту аргументов</li>
    </ul>
    <pre><?php
        echo "\r \$GLOBALS: ";
        var_dump($GLOBALS);
    ?></pre>
</p>

<hr>

<h3>Область видимости переменной</h3>
<p>
    Это контекст, в котором определенна переменная. Обычно, переменные имеют одну область видимости. Она охватывает также влючаемые(<font color="magenta">include</font>) и требуемые(<font color="magenta">require</font>) файлы. Прим(см код):
    <b><?php
        $a = 1;
        include('umom.php'); 
        //здесь переменная a будет доступна внутри включённого скрипта umom.php
        echo superMegaFunction($a, 6, 2);
    ?></b> <br>

    Однако тело локальной пользовательской функции задаёт локальную область видимости данной функции. То есть, если в ней определить переменную с тем же именем, то она будет восприниматься как локальная и та переменна a вне функции не будет изменяться(посмотри код):
    <b><?php
        function s() {
            echo $a;
        }

        s();
    ?></b>
    <br><br>
    Код выше ничего не выведет, так как мы объявили пустую локальную переменную.<br>
    Для того, чтобы использовать глобальную переменную в функции, надо использовать ключслово <font color="magenta">global</font>:
    <pre><?php
        $a = 1;
        $b = 0;

        function output_ab()
        {
            global $a;
            $b = -100500;

            echo "\r\$a is $a. \$b is now $b<br>";
        }
    
        output_ab();
        echo "But, \$b is $b";
    ?></pre>
    Также можно использовать переменную <font color="orange">$GLOBALS</font>, вместо <font color="magenta">global</font>:
    <pre><?php
        function see() {
            echo "\r{$GLOBALS['b']}, {$GLOBALS['a']}" . PHP_EOL;
        }
        see();
    ?></pre>
</p>

<hr>

<h3>Использование статических переменных</h3>
<p>
    Статическая переменная существует только в локальной видимости функции, но не теряет своего значения при выходе из этой области видимости. Например:
    <pre><?php
        function test() {
            $a = 0;
            echo "$a ";
            ++$a;
        }

        for ($i = 0; $i < 10; ++$i)
            test();
    ?></pre>
    Данный код выводит лишь 0, инкремент не играет тут никакой роли, так как при выходе из функции переменная <font color="orange"> $a </font> обнуляется.
    <pre><?php
        function test1() {
            static $a = 0;
            echo "$a ";
            ++$a;
        }
        for ($i = 0; $i < 10; ++$i)
            test1();
    ?></pre>
    Короче говоря, статические переменные существуют и изменяются в функциях всегда и не сбрасываются при выходе из неё. Однако, статическим переменным нельзя присвоить значение функции. То есть:
    <pre><?php
        function foo() {
            static $num  = 3;
            static $num2 = 3 * 40;
            // static $num3 = sqrt($num2);<-- так неправильно.
            echo "$num, $num2. \$num3 выведет ошибку" . PHP_EOL;
        }
        foo();
    ?></pre>
</p>
<p>
    Дело в том, что <font color="magenta">global</font> и <font color="magenta">static</font> на самом деле создают ссылки на перменные, что может приводить к неожиданностям:
    при присвоении ссылки статической переменной, она <u><i>не запоминается</i></u> при каждом вызове функции.
    Так что, использовать ссылки в качестве статических переменных или вызывать из глобальной области видимости в функцию не рекомендуется.
</p>

<hr>

<h3>Перменная переменной</h3>
<p>
    В PHP есть такая штука, позволяющая изменять имена переменной. Называется она пременная переменной. Короче, вот:
    <pre><?php
        $a  = "hello"; // имя переменной
        $$a = "world"; // её значение
        echo "$a ${$a} == $a $hello";
    ?></pre>
    Однако, может возникнуть двусмысленность при обращении к массиву: <font color="orange"> $$a[1] </font>.
    Обработчик не поймёт, что программист имел в виду: <font color="orange"> $a[1] </font> или переменную <font color="orange"> $$a </font>,
    а затем её индекс [1].<br>
    Для таких случаев: <font color="orange"> ${$a[1]} </font> и <font color="orange"> ${$a}[1] </font> соответственно.
</p>

<button>
    <a href="01.php">Previous Lvl</a>
</button>
<button>
    <a href="02.php">Next Lvl</a>
</button>
</font>
<body>
